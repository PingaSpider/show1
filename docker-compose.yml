
services:
  
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 19092:19092
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  registry:
    build:
      context: ./Nucleo
      dockerfile: Dockerfile.registry
    ports:
      - "3333:3333"
    environment:
      - HOST_REGISTRY=registry
      - PORT_REGISTRY=3333
    volumes:
      - shared_data:/app/data

    stdin_open: true  # mantiene STDIN abierto incluso si no est치 adjunto
    tty: true # asigna un pseudo-TTY


  weather:
    build:
      context: ./Clima
      dockerfile: Dockerfile
    ports:
      - "6666:6666" # Asumiendo que el servicio Weather escucha en el puerto 6666
    environment:
      - HOST_WEATHER=weather
      - PORT_WEATHER=6666
    
    stdin_open: true  # mantiene STDIN abierto incluso si no est치 adjunto
    tty: true # asigna un pseudo-TTY
  
  engine:
    build:
      context: ./Nucleo
      dockerfile: Dockerfile.engine
    environment:
      - HOST_ENGINE=engine
      - PORT_ENGINE=5555
      - HOST_BROKER=kafka
      - PORT_BROKER=19092
      - HOST_WEATHER=weather
      - PORT_WEATHER=6666
      - PORT_ENGINE2=6656

    
    depends_on:
      - kafka
    
    volumes:
      - shared_data:/app/data

    stdin_open: true  # mantiene STDIN abierto incluso si no est치 adjunto
    tty: true # asigna un pseudo-TTY
 
  dron:
    build:
      context: .
      dockerfile: Dron/Dockerfile
    environment:
      - HOST_REGISTRY=registry
      - PORT_REGISTRY=3333
      - HOST_ENGINE=engine
      - PORT_ENGINE=5555
      - HOST_BROKER=kafka
      - PORT_BROKER=19092
      - PORT_ENGINE2=6656
    deploy:
      replicas: 5

    
    depends_on:
      - kafka
    
    volumes:
      - shared_data:/app/data
    
    stdin_open: true  # mantiene STDIN abierto incluso si no est치 adjunto
    tty: true # asigna un pseudo-TTY
  

volumes:
  shared_data:


